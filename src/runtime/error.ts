// import ansiHTML from 'ansi-html'
import type { CompatibilityEvent } from 'h3'
import { normalizeError, isJsonRequest } from './utils'

const isDev = process.env.NODE_ENV === 'development'

interface ParsedError {
  url: string
  statusCode: number
  statusMessage: number
  message: string
  stack?: string[]
}

export default function handleError (error: any, event: CompatibilityEvent) {
  const { stack, statusCode, statusMessage, message } = normalizeError(error)

  const showDetails = isDev && statusCode !== 404

  const errorObject = {
    url: event.req.url || '',
    statusCode,
    statusMessage,
    message,
    stack: showDetails ? stack.map(i => i.text) : undefined
  }

  // Console output
  if (statusCode !== 404) {
    console.error('[nitro] [request error]', error.message + '\n' + stack.map(l => '  ' + l.text).join('  \n'))
  }

  event.res.statusCode = statusCode
  event.res.statusMessage = statusMessage

  if (isJsonRequest(event)) {
    event.res.setHeader('Content-Type', 'application/json')
    event.res.end(JSON.stringify(errorObject))
  } else {
    event.res.setHeader('Content-Type', 'text/html')
    event.res.end(renderHTMLError(errorObject))
  }
}

function renderHTMLError (error: ParsedError): string {
  const statusCode = error.statusCode || 500
  const statusMessage = error.statusMessage || 'server'
  return `<!DOCTYPE html>
  <html lang="en">
  <head>
    <title>${statusCode} ${statusMessage}</title>
    <style> body { margin: 2em; } </style>
  </head>
  <body>
    <h1>${statusCode} ${statusMessage}</h1>
    <p>Error: ${error.message}</p>
    <ul>${'\n' + (error.stack || []).map(i => `      <li>${i}</li>`).join('\n')}
    </ul>
    <hr>
    Generated by nitropack at ${new Date().toISOString()}
  </body>
</html>`
}
