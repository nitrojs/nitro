import { ParsedArgs, defineCommand } from "citty";
import { resolve } from "pathe";
import { consola } from "consola";
import type { ListenOptions } from "listhen";
import { createNitro } from "../../nitro";
import { build, prepare } from "../../build";
import { createDevServer } from "../../dev/server";
import { commonArgs } from "../common";
import type { Nitro } from "../../types";

const hmrKeyRe = /^runtimeConfig\.|routeRules\./;

export default defineCommand({
  meta: {
    name: "dev",
    description: "Start the development server",
  },
  args: {
    ...commonArgs,
    ..._listhenArgs(),
  },
  async run({ args }) {
    const rootDir = resolve((args.dir || args._dir || ".") as string);
    let nitro: Nitro;
    const reload = async () => {
      if (nitro) {
        consola.info("Restarting dev server...");
        if ("unwatch" in nitro.options._c12) {
          await nitro.options._c12.unwatch();
        }
        await nitro.close();
      }
      nitro = await createNitro(
        {
          rootDir,
          dev: true,
          preset: "nitro-dev",
        },
        {
          watch: true,
          c12: {
            async onUpdate({ getDiff, newConfig }) {
              const diff = getDiff();

              if (diff.length === 0) {
                return; // No changes
              }

              consola.info(
                "Nitro config updated:\n" +
                  diff.map((entry) => `  ${entry.toString()}`).join("\n")
              );

              await (diff.every((e) => hmrKeyRe.test(e.key))
                ? nitro.updateConfig(newConfig.config) // Full reload
                : reload()); // Hot reload
            },
          },
        }
      );
      nitro.hooks.hookOnce("restart", reload);
      const server = createDevServer(nitro);
      const listhenOptions = _listhenOptions(args);
      await server.listen(listhenOptions.port, listhenOptions);
      await prepare(nitro);
      await build(nitro);
    };
    await reload();
  },
});

// -- Internal utils ---

// TODO: Reuse from unjs/listhen cli

function _listhenArgs() {
  return {
    port: {
      type: "string",
      description:
        "Port to listen on (use PORT environment variable to override)",
    },
    host: {
      type: "string",
      description:
        "Host to listen on (use HOST environment variable to override)",
    },
    clipboard: {
      type: "boolean",
      description: "Copy the URL to the clipboard",
      default: false,
    },
    open: {
      type: "boolean",
      description: "Open the URL in the browser",
      default: false,
    },
    baseURL: {
      type: "string",
      description: "Base URL to use",
    },
    name: {
      type: "string",
      description: "Name to use in the banner",
    },
    https: {
      type: "boolean",
      description: "Enable HTTPS",
      default: false,
    },
    "https.cert": {
      type: "string",
      description: "Path to TLS certificate used with HTTPS in PEM format",
    },
    "https.key": {
      type: "string",
      description: "Path to TLS key used with HTTPS in PEM format",
    },
    "https.pfx": {
      type: "string",
      description:
        "Path to PKCS#12 (.p12/.pfx) keystore containing a TLS certificate and Key",
    },
    "https.passphrase": {
      type: "string",
      description: "Passphrase used for TLS key or keystore",
    },
    "https.validityDays": {
      type: "string",
      description:
        "Validity in days of the autogenerated TLS certificate (https: true)",
    },
    "https.domains": {
      type: "string",
      description:
        "Comma seperated list of domains and IPs, the autogenerated certificate should be valid for (https: true)",
    },
    publicURL: {
      type: "string",
      description: "Displayed public URL (used for qr code)",
      required: false,
    },
    qr: {
      type: "boolean",
      description: "Display The QR code of public URL when available",
      required: false,
    },
    public: {
      type: "boolean",
      description: "Listen to all network interfaces",
      required: false,
    },
    tunnel: {
      type: "boolean",
      description: "Open a tunnel using https://github.com/unjs/untun",
      required: false,
    },
  } as const;
}

type ParsedListhenArgs = ParsedArgs<ReturnType<typeof _listhenArgs>>;

function _listhenOptions(args: ParsedListhenArgs): Partial<ListenOptions> {
  return {
    ...args,
    port: args.port,
    hostname: args.host,
    clipboard: args.clipboard,
    open: args.open,
    baseURL: args.baseURL,
    name: args.name,
    qr: args.qr,
    publicURL: args.publicURL,
    public: args.public,
    https: args.https
      ? {
          cert: args["https.cert"],
          key: args["https.key"],
          pfx: args["https.pfx"],
          passphrase: args["https.passphrase"],
          validityDays: args["https.validityDays"]
            ? +args["https.validityDays"]
            : undefined,
          domains: args["https.domains"]
            ? args["https.domains"].split(",")
            : undefined,
        }
      : false,
    tunnel: args.tunnel,
  };
}
